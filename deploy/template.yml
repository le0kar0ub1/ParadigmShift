AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Metadata: 
  License: GNU-3.0
Description: ParadigmShift - AWS SAM template

Parameters:
  Project:
    Type: String
    MinLength: 4
    MaxLength: 20
    AllowedPattern: '[a-z][a-z0-9\-]+'
    ConstraintDescription: must begin with a letter and contain only lowercase characters and '-'.
    Default: paradigmshift
  SchedulerRule:
    Type: String
    # AllowedPattern: (\*|([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])|\*\/([0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])) (\*|([0-9]|1[0-9]|2[0-3])|\*\/([0-9]|1[0-9]|2[0-3])) (\*|([1-9]|1[0-9]|2[0-9]|3[0-1])|\*\/([1-9]|1[0-9]|2[0-9]|3[0-1])) (\*|([1-9]|1[0-2])|\*\/([1-9]|1[0-2])) (\*|([0-6])|\*\/([0-6]))\)
    # ConstraintDescription: must match the cron syntax.
    Default: cron
    #(0/10 * * * ? *)
  Region:
    Type: String
    AllowedValues:
      - us-east-2
      - us-east-1
      - us-west-1
      - us-west-2
      - af-south-1
      - ap-east-1
      - ap-south-1
      - ap-northeast-3
      - ap-northeast-2
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
      - ca-central-1
      - cn-north-1
      - cn-northwest-1
      - eu-central-1
      - eu-west-1
      - eu-west-2
      - eu-south-1
      - eu-west-3
      - eu-north-1
      - me-south-1
      - sa-east-1
    ConstraintDescription: must be an AWS region.
  RootSrcDir:
    Type: String
    Default: ../src/backend

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 10
    Tags:
      Project: !Ref Project
    Environment:
      Variables:
        REGION: !Ref Region
        DBID_CONTEXTDEF: !Sub "${Project}-context"
        DBID_RESOURCES: !Sub "${Project}-resource"

Resources:

  #####################################
  ######## Lambda global role #########
  #####################################

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Project}-lambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Delete*
                  - dynamodb:Scan
                  - dynamodb:Put*
                  - dynamodb:Update*
                  - dynamodb:Query
                Resource:
                  - "*"
        - PolicyName: s3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:Get*
                  - s3:List*
                  - s3:DeleteObject
                Resource:
                  - "*"
        - PolicyName: lambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:Invoke
                Resource:
                  - "*"

  ###################################
  ######## the two DynamoDB #########
  ###################################

  # dynamoDBcontext:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     TableName: !Sub "${Project}-context"
  #     AttributeDefinitions:
  #     - AttributeName: contextID
  #       AttributeType: S
  #     KeySchema:
  #     - AttributeName: contextID
  #       KeyType: HASH
  #     BillingMode: PAY_PER_REQUEST
  
  # dynamoDBresource:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     TableName: !Sub "${Project}-resource"
  #     AttributeDefinitions:
  #     - AttributeName: contextID
  #       AttributeType: S
  #     KeySchema:
  #     - AttributeName: contextID
  #       KeyType: HASH
  #     BillingMode: PAY_PER_REQUEST

  #############################################
  ######## Scheduled Lambda Resources #########
  #############################################

  # lambdaScheduler:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #   FunctionName: !Sub "${Project-scheduledLambda"
  #     Description: scheduled lambda
  #     CodeUri: !Sub "${RootSrcDir}/scheduler"
  #     Handler: scheduler.handler
  #     Role: !GetAtt LambdaRole.Arn

  # lambdaSchedulerRule:
  #   Type: "AWS::Events::Rule"
  #   Properties:
  #     Description: set the trigger rate
  #     ScheduleExpression: !Sub cron(${SchedulerRule})
  #     State: ENABLED
  #     Targets:
  #       - Arn: !Sub ${lambdaScheduler.Arn}
  #         Id: lambdaSchedulerRule

  # lambdaSchedulerPermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: 'lambda:InvokeFunction'
  #     FunctionName: !Sub ${lambdaScheduler.Arn}
  #     Principal: 'events.amazonaws.com'
  #     SourceArn: !Sub ${lambdaSchedulerRule.Arn}

  #############################################
  ######## Context get Lambda Resources #######
  #############################################

  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
        Name: !Sub ${Project}-globapi
        StageName: prod
        EndpointConfiguration: EDGE
        Cors:
            AllowMethods: "'*'"
            AllowHeaders: "'*'"
            AllowOrigin: "'*'"

  #############################################
  ######## Context get Lambda Resources #######
  #############################################

  lambdaGetData:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: !Sub "${Project}-getdata"
        Description: get context and resources from database
        CodeUri: !Sub ${RootSrcDir}/requests
        Handler: dataget.handler
        Role: !GetAtt LambdaRole.Arn
        Events:
          getData:
            Type: Api
            Properties:
              RestApiId: !Ref APIGateway
              Path: /getdata
              Method: POST

  ##################################################
  ######## Context register Lambda Resources #######
  ##################################################

  lambdaContextRegister:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: !Sub "${Project}-registercontext"
        Description: register an entire context in database
        CodeUri: !Sub ${RootSrcDir}/requests
        Handler: context_register.handler
        Role: !GetAtt LambdaRole.Arn
        Events:
          getData:
            Type: Api
            Properties:
              RestApiId: !Ref APIGateway
              Path: /registercontext
              Method: POST

  ##################################################
  ######## Context register Lambda Resources #######
  ##################################################
  
  lambdaContextUNRegister:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: !Sub "${Project}-unregistercontext"
        Description: unregister an entire context in database
        CodeUri: !Sub ${RootSrcDir}/requests
        Handler: context_unregister.handler
        Role: !GetAtt LambdaRole.Arn
        Events:
          getData:
            Type: Api
            Properties:
              RestApiId: !Ref APIGateway
              Path: /unregistercontext
              Method: POST

  ####################################
  ######## CloudFront & Bucket #######
  ####################################

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Project}-static"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Project
          Value: !Ref Project
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
      Tags:
        - Key: Project
          Value: !Ref Project