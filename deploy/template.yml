AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ParadigmShift - AWS SAM template

Parameters:
  Project:
    Type: String
    MinLength: 4
    MaxLength: 20
    AllowedPattern: "[a-z][a-z0-9\-]+"
    ConstraintDescription: must begin with a letter and contain only lowercase characters and '-'.
    Default: paradigmshift
  SchedulerRule:
    Type: String
    AllowedPattern: "cron\((\*|((\*\/)?[1-5]?[0-9])) (\*|((\*\/)?[1-5]?[0-9])) (\*|((\*\/)?(1?[0-9]|2[0-3]))) (\*|((\*\/)?([1-9]|[12][0-9]|3[0-1]))) (\*|((\*\/)?([1-9]|1[0-2]))) (\*|((\*\/)?[0-6])))"
    ConstraintDescription: must match the cron syntax.
    Default: cron(0/5 * * * ? *) # all 5 minutes
  Region:
    Type: String
    AllowedValues:
      - us-east-2
      - us-east-1
      - us-west-1
      - us-west-2
      - af-south-1
      - ap-east-1
      - ap-south-1
      - ap-northeast-3
      - ap-northeast-2
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
      - ca-central-1
      - cn-north-1
      - cn-northwest-1
      - eu-central-1
      - eu-west-1
      - eu-west-2
      - eu-south-1
      - eu-west-3
      - eu-north-1
      - me-south-1
      - sa-east-1
    ConstraintDescription: must be an AWS region.
    Default: !Ref 'AWS::Region'
  RootSrcDir:
    Type: String
    Default: ../src/backend

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 10
    Tags:
      Project: !Ref Project
    Environment:
      Variables:
        REGION: !Ref Region
        DBID_CONTEXTDEF: !Sub ${Project}-context
        DBID_RESOURCES: !Sub ${Project}-resource

Resources:

  #####################################
  ######## Lambda global role #########
  #####################################

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Project}-lambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Delete*
                  - dynamodb:Scan
                  - dynamodb:Put*
                  - dynamodb:Update*
                  - dynamodb:Query
                Resource:
                  - "*"
        - PolicyName: s3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -  Effect: Allow
                 Action:
                   - s3:PutObject
                   - s3:Get*
                   - s3:List*
                   - s3:DeleteObject
                 Resource:
                   - "*"
        - PolicyName: lambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            -  Effect: Allow
               Action:
                 - lambda:Invoke
               Resource:
                 - "*"

  ###################################
  ######## the two DynamoDB #########
  ###################################

  dynamoDBcontext:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Project}-context"
      AttributeDefinitions:
      - AttributeName: contextID
        AttributeType: S
      KeySchema:
      - AttributeName: contextID
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  
  dynamoDBresource:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Project}-resource"
      AttributeDefinitions:
      - AttributeName: contextID
        AttributeType: S
      KeySchema:
      - AttributeName: contextID
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  #############################################
  ######## Scheduled Lambda Resources #########
  #############################################

  lambdaScheduler:
    Type: AWS::Serverless::Function
    Properties:
    FunctionName: !Sub "${Project-scheduledLambda"
      Description: scheduled lambda
      CodeUri: !Sub "${RootSrcDir}/scheduler"
      Handler: scheduler.handler
      Role: !GetAtt LambdaRole.Arn

  lambdaSchedulerRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: set the trigger rate
      ScheduleExpression: !Sub ${SchedulerRule}
      State: ENABLED
      Targets:
        - Arn: !Sub ${lambdaScheduler.Arn}
          Id: lambdaSchedulerRule

  lambdaSchedulerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${lambdaScheduler.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${lambdaSchedulerRule.Arn}

  #############################################
  ######## Context get Lambda Resources #######
  #############################################

  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
        Name: !Sub ${Project}-globapi
        StageName: prod
        EndpointConfiguration: EDGE
        Cors:
            AllowMethods: "'*'"
            AllowHeaders: "'*'"
            AllowOrigin: "'*'"

  #############################################
  ######## Context get Lambda Resources #######
  #############################################

  lambdaGetData:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: !Sub "${Project}-getdata"
        Description: get context and resources from database
        CodeUri: !Sub ${RootSrcDir}/data-get
        Handler: dataget.handler
        Role: !GetAtt LambdaRole.Arn
        Events:
          getData:
            Type: Api
            Properties:
              RestApiId: !Ref APIGateway
              Path: /getdata
              Method: POST

  ##################################################
  ######## Context register Lambda Resources #######
  ##################################################

  lambdaContextRegister:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: !Sub "${Project}-registercontext"
        Description: register an entire context in database
        CodeUri: !Sub ${RootSrcDir}/data-set
        Handler: context_register.handler
        Role: !GetAtt LambdaRole.Arn
        Events:
          getData:
            Type: Api
            Properties:
              RestApiId: !Ref APIGateway
              Path: /registercontext
              Method: POST

  ##################################################
  ######## Context register Lambda Resources #######
  ##################################################
  
  lambdaContextUNRegister:
    Type: AWS::Serverless::Function
    Properties:
        FunctionName: !Sub "${Project}-unregistercontext"
        Description: unregister an entire context in database
        CodeUri: !Sub ${RootSrcDir}/data-set
        Handler: context_unregister.handler
        Role: !GetAtt LambdaRole.Arn
        Events:
          getData:
            Type: Api
            Properties:
              RestApiId: !Ref APIGateway
              Path: /unregistercontext
              Method: POST